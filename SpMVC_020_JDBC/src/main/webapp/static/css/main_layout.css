@charset "UTF-8";

* {
	box-sizing: border-box;
	margin: 0;
	padding: 0;
}

body {
	dispayl: flex;
	flex-direction: column;
	width: 100%;
	height: 100vh;
}

h1.page_title {
	width: 90%;
	margin: 10px auto 0 auto;
}


section.main_sec {
	flex: auto;
	overflow: auto;
	/*화면이 넘어가면 스크롤 생기기*/
}

header {
	background-color: green;
	color: white;
	text-shadow: 1px 1px 1px black;
	text-align: center;
	padding: 2rem;
}

/*
style지정을 할 때

style지정을 할 때 tag에 id나 class를 부착하지 않고 지정하는 경우
1. 현재 main_layout.css파일은 모든 jsp에서 공통으로 include
	모든 jsp에 있는 table에 공통으로 속성이 적용된다.
2. 만약 특정한 jsp파일에서만 table tag에 속성을 부여하고 싶으면 
	table tag에 id나 class를 지정하고
	table#id, table.class 형식으로 style을 지정해야 한다.
	
3. 전체 프로젝터의 view를 일관되게 구현하고자 할때
	대표적인 tag에 style을 지정하고 include하여 사용하는 방법		
*/
table {
	
	/*
	css 2.1 적용 spec
	table을 구성했을 때 td에 있는 text(content)의 길이가 변동되거나 할때
	table의 전체 모양이 움찔거리는 현상을 방지하는 속성
	*/
	table-layout: fixed;
	border-collapse: collapse;
	border-spacing: 0;
	width: 90%;
	margin: 0 auto;
}

table, th, td {
	border-top: 1px solid #aaa;
	padding: 5px 8px;
	/*text font 크기에 따라 높이를 고정하는 속성*/
	height: 2rem;
	
}

table td {
	margin-left: 30px;
	text-align: left;
	padding-left: 10px;

}
/*
td의 text가 넘칠경우 ellipsis를 적용하는데 단순히 td에 적용하면 이웃하는 다른 td의 글자와 겹치는 현상이 발생
이것을 방지하기 위하여 속성 설정
*/
table td span{
	position: relative;
	height: 1.2rem;
	display: inline-block;
	margin-top:5px; 
}

table td label.truncate {
	max-width: 80px;
	overflow: hidden;
	white-space: nowrap;
	text-overflow: ellipsis;
	cursor: inherit;	
	display: inline-block;
}

/* td에 마우스 hover되면 ellipsis를 해제하여 text를 그대로 보여주기 */
/*
table td:hover {
	
   overflow: visible;
   text-overflow: inherit;
   
}
*/

/*td에 hover가 올라가면 label에 영향을 줘라?*/
table td:hover label.truncate {
	position: absolute;
	max-width: none;
	background-color: #aaa;
	overflow: visible;
	top: -6px;
	padding: 5px 20px 5px 0;
	z-index: 100;
	
}

table tr:last-child td {
	border-bottom: 1px solid #aaa;
}

table tr:nth-child(odd) {
	background-color: #eee;
}

table tr:nth-child(even) {
	background-color: #ddd;
}

table tr:hover {
	background-color: #aaa;
	cursor: pointer;
}
/*
매 페이지마다 버튼에 스타일을 지정하지 않아도 class의 이름을 같게 한다면 
같은 속성을 가진 버튼을 만들 수 있다.
*/
div.btn_box {
	width: 90%;
	margin: 5px auto;
	text-align: right;
}

button {
	padding: 10px 20px;
	outline: 0;
	border: 0;
	border-radius: 5px;
}

button:hover {
	box-shadow: 2px 2px 2px rgba(0, 0, 0, 0.7);
	cursor: pointer;
}

button.btn_insert {
	background-color: blue;
	color: white;
}

button.btn_save {
	background-color: blue;
	color: white;
}

button.btn_reset {
	background-color: green;
	color: white;
}

button.btn_list {
	background-color: orange;
	color: white;
}

button.btn_delete {
	background-color: red;
	color: white;
}

div#modal {
	position: fixed;
	top: 0;
	left: 0;
	right: 0;
	bottom: 0;
	background-color: black;
	opacity: 0.5;
	z-index: 100;
	/*
	z-index: 100; 원래 있던 창보다 앞으로 나와라
	*/
	display: none;
}

div#modal span {
	position: absolute;
	display: inline-block;
	top: 30px;
	right: 30px;
	font-size: 30px;
	color: white;
	font-weight: 900;
	border-radius: 50%;
	padding: 10px 20px;
	transition: 0.6s;
}

div#modal span:hover {
	background-color: white;
	cursor: pointer;
}

section.search_sec {
	/*
		바깥쪽 box의 position의 fiexd로 되어있기 때문에 내부의 box를 바깥 box의 중앙에 배치하기 위하여
		position을 absolute로 설정하고 위치를 지정하였다.
		상단에 있는 것이 fixed로 고정되어 있기 때문에 
		justify-content, align-content가 적용이 되지 않았다. 원래는 flex로 적용을 하고 저 두가지를 적용시켜도 가운데로 위치할 수 있다.
		*/
	position: absolute;
	top: 50%;
	left: 50%;
	/* 자기 몸체크기의 x, y 방향으로 50% 만큼 후진 */
	transform: translate(-50%, -50%);
	background-color: white;
	opacity: 1;
	width: 80%;
	height: 80%;
	display: flex;
	justify-content: center;
	align-content: center;
	overflow: auto;
}

section.search_sec table {
	width: 90%;
}